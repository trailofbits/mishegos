#!/usr/bin/env ruby
# frozen_string_literal: true

# filter-xed-find-overaccept: find inputs that XED potentially overaccepts
# (i.e., inputs the other high-quality decoders think are invalid)

require "json"

# TODO(ww): Remove this.
BDDISASM_SO = "./src/worker/bddisasm/bddisasm.so"
XED_SO = "./src/worker/xed/xed.so"
ZYDIS_SO = "./src/worker/zydis/zydis.so"
ICED_SO = "./src/worker/iced/iced.so"

def success?(decoder)
  decoder[:status][:value] == 1
end

STDERR.puts "[+] pass: filter-xed-find-overaccept"

count = 0
STDIN.each_line do |line|
  result = JSON.parse line, symbolize_names: true

  bddisasm = result[:outputs].find { |o| o[:worker_so] == BDDISASM_SO }
  xed = result[:outputs].find { |o| o[:worker_so] == XED_SO }
  zydis = result[:outputs].find { |o| o[:worker_so] == ZYDIS_SO }
  iced = result[:outputs].find { |o| o[:worker_so] == ICED_SO }

  # If XED reports success when other high-quality decoders don't, keep it.
  # TODO(ww): This should use consensus (2/3) instead of any of them disagreeing with XED.
  if success?(xed) && (!success?(bddisasm) || !success?(zydis) || !success?(iced))
    STDOUT.puts result.to_json
  end

  count += 1
end

STDERR.puts "[+] pass: filter-xed-find-overaccept done: #{count} filtered"
